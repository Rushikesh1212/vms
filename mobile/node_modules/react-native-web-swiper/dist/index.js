function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}import React from"react";import{StyleSheet,View,ViewPropTypes,Text,Animated,PanResponder,TouchableOpacity}from"react-native";import PropTypes from"prop-types";const styles=StyleSheet.create({container:{flex:1,backgroundColor:"transparent"},sliderContainer:{backgroundColor:"transparent",overflow:"hidden",position:"relative",flex:1},controlsWrapperStyle:{position:"absolute",alignItems:"center",justifyContent:"space-between",right:0,bottom:0,padding:10},dotsWrapperStyle:{alignItems:"center",justifyContent:"center"},activeDotStyle:{backgroundColor:"#007aff",width:8,height:8,borderRadius:4,marginLeft:3,marginRight:3,marginTop:3,marginBottom:3},dotStyle:{backgroundColor:"rgba(0,0,0,.2)",width:8,height:8,borderRadius:4,marginLeft:3,marginRight:3,marginTop:3,marginBottom:3},prevButtonStyle:{color:"#777777"},nextButtonStyle:{color:"#007aff"}});export default class Swiper extends React.Component{constructor(a){var b=Math.abs;super(a),this.state={width:0,height:0,activeIndex:a.index,pan:new Animated.ValueXY},this._animatedValueX=0,this._animatedValueY=0,this._panResponder=PanResponder.create({onPanResponderTerminationRequest:()=>!1,onMoveShouldSetResponderCapture:()=>!0,onMoveShouldSetPanResponderCapture:(a,c)=>{if(!this.props.swipingEnabled)return!1;this.props.onAnimationStart&&this.props.onAnimationStart();const d=5<b("row"===this.props.direction?c.dx:c.dy);return d&&this.stopAutoplay(),d},onPanResponderGrant:()=>this._fixState(),onPanResponderMove:Animated.event([null,"row"===this.props.direction?{dx:this.state.pan.x}:{dy:this.state.pan.y}]),onPanResponderRelease:(a,c)=>{const d="row"===this.props.direction?c.moveX-c.x0:c.moveY-c.y0;return this.startAutoplay(),b(d)<("row"===this.props.direction?this.state.width:this.state.height)*this.props.actionMinWidth?Animated.spring(this.state.pan,{toValue:{x:0,y:0}}).start(()=>{this.props.onAnimationEnd&&this.props.onAnimationEnd(this.state.activeIndex)}):void this._changeIndex(0<d?-1:1)}})}componentDidMount(){this.state.pan.x.addListener(a=>this._animatedValueX=a.value),this.state.pan.y.addListener(a=>this._animatedValueY=a.value),this.startAutoplay()}componentWillUnmount(){this.stopAutoplay(),this.state.pan.x.removeAllListeners(),this.state.pan.y.removeAllListeners()}startAutoplay(){this.stopAutoplay(),this.props.autoplayTimeout&&(this.autoplay=setTimeout(()=>{this.moveUpDown(0>this.props.autoplayTimeout)},1e3*Math.abs(this.props.autoplayTimeout)))}stopAutoplay(){this.autoplay&&clearTimeout(this.autoplay)}goto(a){0==a-this.state.activeIndex||(this._fixState(),this.props.onAnimationStart&&this.props.onAnimationStart(),this._changeIndex(a-this.state.activeIndex))}moveUpDown(a=!1){this._fixState(),this.props.onAnimationStart&&this.props.onAnimationStart(),this._changeIndex(a?-1:1)}_fixState(){this._animatedValueX="row"===this.props.direction?-1*(this.state.width*this.state.activeIndex):0,this._animatedValueY="row"===this.props.direction?0:-1*(this.state.height*this.state.activeIndex),this.state.pan.setOffset({x:this._animatedValueX,y:this._animatedValueY}),this.state.pan.setValue({x:0,y:0})}_changeIndex(a=1){let b={x:0,y:0},c=!a,d=a;if(0>=this.state.activeIndex&&0>a?(c=!this.props.loop,d=this.count+a):this.state.activeIndex+1>=this.count&&0<a&&(c=!this.props.loop,d=-1*this.state.activeIndex+a-1),c)return Animated.spring(this.state.pan,{toValue:b}).start(()=>{this.props.onAnimationEnd&&this.props.onAnimationEnd(this.state.activeIndex)});this.stopAutoplay();let e=this.state.activeIndex+d;this.setState({activeIndex:e}),"row"===this.props.direction?b.x=-1*this.state.width*d:b.y=-1*this.state.height*d,Animated.spring(this.state.pan,{toValue:b}).start(()=>{this.props.onAnimationEnd&&this.props.onAnimationEnd(e)}),this.startAutoplay(),this.props.onIndexChanged&&this.props.onIndexChanged(e)}_onLayout(a){const{width:b,height:c}=a.nativeEvent.layout;this.setState({width:b,height:c},()=>this._fixState())}render(){const{pan:a,width:b,height:c,activeIndex:d}=this.state,{direction:e,containerStyle:f,swipeAreaStyle:g,swipeWrapperStyle:h,controlsWrapperStyle:i,dotsWrapperStyle:j,dotElement:k,dotStyle:l,activeDotElement:m,activeDotStyle:n,prevButtonElement:o,prevButtonStyle:p,prevButtonText:q,nextButtonElement:r,nextButtonStyle:s,nextButtonText:t,loop:u,buttonsEnabled:v}=this.props;if(!b)return React.createElement(View,{style:[styles.container,f],onLayout:this._onLayout.bind(this)});const w=u?this.props.overRangeButtonsOpacity||1:this.props.overRangeButtonsOpacity;let{children:x}=this.props;return Array.isArray(x)||(x=[x]),this.count=x.length,React.createElement(View,{style:[styles.container,f],onLayout:this._onLayout.bind(this)},React.createElement(View,{style:[styles.sliderContainer,g]},React.createElement(Animated.View,_extends({style:[{position:"relative",top:0,left:0},h,{flexDirection:e,width:"row"===e?b*this.count:b,height:"row"===e?c:c*this.count},{transform:[{translateX:a.x},{translateY:a.y}]}]},this._panResponder.panHandlers),x.map((a,d)=>React.createElement(View,{key:d,style:{width:b,height:c}},a))),v?React.createElement(View,{style:[styles.controlsWrapperStyle,{flexDirection:e},"row"===e?{left:0}:{top:0},i]},React.createElement(View,{style:{opacity:d?1:w}},React.createElement(TouchableOpacity,{disabled:!d&&!u,onPress:()=>this.moveUpDown(!0)},o||React.createElement(Text,{style:[styles.prevButtonStyle,p]},q))),React.createElement(View,{style:[{flexDirection:e},styles.dotsWrapperStyle,j]},x.map((a,b)=>React.createElement(View,{key:b},b===d?m||React.createElement(View,{style:[styles.activeDotStyle,n]}):k||React.createElement(View,{style:[styles.dotStyle,l]})))),React.createElement(View,{style:{opacity:d+1>=this.count?w:1}},React.createElement(TouchableOpacity,{disabled:d+1>=this.count&&!u,onPress:()=>this.moveUpDown()},r||React.createElement(Text,{style:[styles.nextButtonStyle,s]},t)))):null))}}Swiper.propTypes={direction:PropTypes.oneOf(["row","column"]),index:PropTypes.number,onIndexChanged:PropTypes.func,onAnimationStart:PropTypes.func,onAnimationEnd:PropTypes.func,actionMinWidth:PropTypes.number,children:PropTypes.node.isRequired,overRangeButtonsOpacity:PropTypes.number,loop:PropTypes.bool,autoplayTimeout:PropTypes.number,swipingEnabled:PropTypes.bool,buttonsEnabled:PropTypes.bool,containerStyle:ViewPropTypes.style,swipeAreaStyle:ViewPropTypes.style,swipeWrapperStyle:ViewPropTypes.style,controlsWrapperStyle:ViewPropTypes.style,dotsWrapperStyle:ViewPropTypes.style,dotStyle:ViewPropTypes.style,dotElement:PropTypes.element,activeDotStyle:ViewPropTypes.style,activeDotElement:PropTypes.element,prevButtonStyle:Text.propTypes.style,prevButtonElement:PropTypes.element,prevButtonText:PropTypes.string,nextButtonStyle:Text.propTypes.style,nextButtonElement:PropTypes.element,nextButtonText:PropTypes.string},Swiper.defaultProps={direction:"row",index:0,actionMinWidth:.25,overRangeButtonsOpacity:0,loop:!1,autoplayTimeout:0,swipingEnabled:!0,buttonsEnabled:!0,prevButtonText:"prev",nextButtonText:"next"};