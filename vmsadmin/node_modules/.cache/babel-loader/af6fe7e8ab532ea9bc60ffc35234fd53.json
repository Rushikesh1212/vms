{"ast":null,"code":"import Signature from \"./Signature\";\nimport Policy from \"./Policy\";\nimport { dateISOString, xAmzDate, dateYMD } from \"./Date\";\nimport { throwError } from './ErrorThrower';\n\nclass S3FileUpload {\n  static async uploadFile(file, config) {\n    // Error Thrower :x:\n    throwError(config, file);\n    const fd = new FormData();\n    const key = \"\".concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name);\n    const url = \"https://\".concat(config.bucketName, \".s3.amazonaws.com/\");\n    fd.append(\"key\", key);\n    fd.append(\"acl\", \"public-read\");\n    fd.append(\"Content-Type\", file.type);\n    fd.append(\"x-amz-meta-uuid\", \"14365123651274\");\n    fd.append(\"x-amz-server-side-encryption\", \"AES256\");\n    fd.append(\"X-Amz-Credential\", \"\".concat(config.accessKeyId, \"/\").concat(dateYMD, \"/\").concat(config.region, \"/s3/aws4_request\"));\n    fd.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\n    fd.append(\"X-Amz-Date\", xAmzDate);\n    fd.append(\"x-amz-meta-tag\", \"\");\n    fd.append(\"Policy\", Policy.getPolicy(config));\n    fd.append(\"X-Amz-Signature\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n    fd.append(\"file\", file);\n    const params = {\n      method: \"post\",\n      headers: {\n        fd\n      },\n      body: fd\n    };\n    const data = await fetch(url, params);\n    if (!data.ok) return Promise.reject(data);\n    return Promise.resolve({\n      bucket: config.bucketName,\n      key: \"\".concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name),\n      location: \"\".concat(url).concat(config.dirName ? config.dirName + \"/\" : \"\").concat(file.name),\n      result: data\n    });\n  }\n\n  static async deleteFile(fileName, config) {\n    const fd = new FormData();\n    const url = \"https://\".concat(config.bucketName, \".s3-\").concat(config.region, \".amazonaws.com/\").concat(config.dirName ? config.dirName + \"/\" : \"\").concat(fileName);\n    fd.append(\"Date\", xAmzDate);\n    fd.append(\"X-Amz-Date\", xAmzDate);\n    fd.append(\"Authorization\", Signature.getSignature(config, dateYMD, Policy.getPolicy(config)));\n    fd.append(\"Content-Type\", \"text/plain\");\n    const params = {\n      method: \"delete\",\n      headers: {\n        fd\n      }\n    };\n    const deleteResult = await fetch(url, params);\n    if (!deleteResult.ok) return Promise.reject(deleteResult);\n    return Promise.resolve({\n      ok: deleteResult.ok,\n      status: deleteResult.status,\n      message: \"File Deleted\",\n      fileName: fileName\n    });\n  }\n\n}\n\nconst uploadFile = S3FileUpload.uploadFile,\n      deleteFile = S3FileUpload.deleteFile;\nexport { uploadFile, deleteFile };\nexport default S3FileUpload;","map":null,"metadata":{},"sourceType":"module"}