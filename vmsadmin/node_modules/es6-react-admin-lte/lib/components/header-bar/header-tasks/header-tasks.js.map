{"version":3,"sources":["../../../../src/js/components/header-bar/header-tasks/header-tasks.jsx"],"names":["HeaderTasks","props","state","open","toggleDropdown","bind","e","type","setState","progressBarColor","taskList","tasks","map","taskDetails","i","percentage","subject","link","onClick","count","length","clickHandler","React","Component","propTypes","PropTypes","number","array","func","defaultProps"],"mappings":"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","file":"header-tasks.js","sourcesContent":["import React from 'react';\nimport TaskItem from './task-item.jsx';\nimport PropTypes from 'prop-types';\n\nclass HeaderTasks extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n  }\n\n  toggleDropdown(e) {\n    if ((e.type === 'blur' && this.state.open) || e.type !== 'blur') {\n      this.setState({ open: !this.state.open });\n    }\n  }\n\n  render() {\n    let progressBarColor;\n    const taskList = this.props.tasks.map((taskDetails, i) => {\n      if (taskDetails.percentage < 21) {\n        progressBarColor = 'bg-red';\n      } else if (taskDetails.percentage > 20 && taskDetails.percentage < 41) {\n        progressBarColor = 'bg-yellow';\n      } else if (taskDetails.percentage > 40 && taskDetails.percentage < 61) {\n        progressBarColor = 'bg-green';\n      } else if (taskDetails.percentage > 60) {\n        progressBarColor = 'bg-aqua';\n      }\n      return (\n        <TaskItem\n          key={i}\n          percentage={taskDetails.percentage}\n          content={taskDetails.subject}\n          theme={progressBarColor}\n          link={taskDetails.link}\n          onClick={taskDetails.onClick}\n        />\n      );\n    });\n    return (\n      <li className={`dropdown tasks-menu${this.state.open ? ' open' : ''}`} tabIndex=\"0\" onBlur={this.toggleDropdown}>\n        <a className=\"dropdown-toggle\" data-toggle=\"dropdown-menu\" onClick={this.toggleDropdown}>\n          <i className=\"fa fa-flag-o\" />\n          <span className=\"label label-danger\">{this.props.count || this.props.tasks.length}</span>\n        </a>\n        <ul className=\"dropdown-menu\">\n          <li className=\"header\">\n            You have {this.props.count || this.props.tasks.length} tasks.\n          </li>\n          <li>\n            <div className=\"slimScrollDiv\">\n              <ul className=\"menu\">\n                {taskList}\n              </ul>\n              <div className=\"slimScrollBar\" />\n              <div className=\"slimScrollRail\" />\n            </div>\n          </li>\n          {this.props.clickHandler ? (\n            <li className=\"footer\">\n              <a onClick={this.props.clickHandler}>\n                View all tasks\n              </a>\n            </li>\n          ) : ''}\n        </ul>\n      </li>\n    );\n  }\n}\n\nHeaderTasks.propTypes = {\n  count: PropTypes.number,\n  tasks: PropTypes.array,\n  clickHandler: PropTypes.func\n};\n\nHeaderTasks.defaultProps = {\n  tasks: []\n};\n\nexport default HeaderTasks;\n"]}